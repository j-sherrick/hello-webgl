{"mappings":"ICcM,EAdN,SAAS,EAAa,CAA0B,CAAE,CAAY,CAAE,CAAc,EAC5E,IAAI,EAAS,EAAG,YAAY,CAAC,SAK7B,CAJA,EAAG,YAAY,CAAC,EAAQ,GACxB,EAAG,aAAa,CAAC,GACD,EAAG,kBAAkB,CAAC,EAAQ,EAAG,cAAc,GAE3C,GAEpB,QAAQ,GAAG,CAAC,EAAG,gBAAgB,CAAC,IAChC,EAAG,YAAY,CAAC,GACT,KACT,CAgCA,MAAM,EAAqB,CAAC;A;A;A;A;A;A;A;A;A;A;A;A;A;AAc3B,CAAA,CAAC,CAEI,EAAuB,CAAC;A;A;A;A;A;A;A;A;A;A;A;AAY9B,CAAC,CAGD,IAAI,EAAS,SAAS,cAAc,CAAC,aACjC,EAAK,EAAO,UAAU,CAAC,WAAuC,KAC7D,GACH,CAAA,EAAO,SAAS,CAAG,4BADrB,EAIA,IAAI,EAAU,EAAa,EAAI,EAAG,aAAa,CAAE,GAC7C,EAAU,EAAa,EAAI,EAAG,eAAe,CAAE,GAC/C,GApEE,EAAU,AAoEY,EApET,aAAa,GAM9B,CALA,AAmE0B,EAnEvB,YAAY,CAAC,EAmEc,GAlE9B,AAkE0B,EAlEvB,YAAY,CAAC,EAkEuB,GAjEvC,AAiE0B,EAjEvB,WAAW,CAAC,GACC,AAgEU,EAhEP,mBAAmB,CAAC,EAAS,AAgEtB,EAhEyB,WAAW,GAE1C,GAEpB,QAAQ,GAAG,CAAC,AA4Dc,EA5DX,iBAAiB,CAAC,IACjC,AA2D0B,EA3DvB,aAAa,CAAC,GACV,OA2DT,EAAG,UAAU,CAAC,GAGd,MAAM,EAAe,IAAI,aAAa,CACpC,EAAK,EACL,IAAK,GACL,IAAK,IACL,GAAK,IACL,GAAK,GACN,EACK,EAAgB,IAAI,aAAa,CACrC,IACA,IACA,IACA,IACA,GACA,IACD,EACK,EAAY,IAAI,aAAa,CACjC,GAAK,EAAK,GACV,GAAK,GAAK,EACV,IAAM,GAAK,EACX,GAAK,GAAK,EACV,GAAK,GAAK,GACX,EAMK,EAA8B,EAAG,YAAY,GACnD,EAAG,UAAU,CAAC,EAAG,YAAY,CAAE,GAC/B,EAAG,UAAU,CAAC,EAAG,YAAY,CAAE,EAAc,EAAG,WAAW,EAC3D,EAAG,mBAAmB,CAPJ,EAOgB,EAAG,EAAG,KAAK,CAAE,CAAA,EAAO,EAAG,GAEzD,MAAM,EAA+B,EAAG,YAAY,GACpD,EAAG,UAAU,CAAC,EAAG,YAAY,CAAE,GAC/B,EAAG,UAAU,CAAC,EAAG,YAAY,CAAE,EAAe,EAAG,WAAW,EAC5D,EAAG,mBAAmB,CAXH,EAWgB,EAAG,EAAG,KAAK,CAAE,CAAA,EAAO,EAAG,GAE1D,MAAM,EAA2B,EAAG,YAAY,GAChD,EAAG,UAAU,CAAC,EAAG,YAAY,CAAE,GAC/B,EAAG,UAAU,CAAC,EAAG,YAAY,CAAE,EAAW,EAAG,WAAW,EACxD,EAAG,mBAAmB,CAfP,EAegB,EAAG,EAAG,KAAK,CAAE,CAAA,EAAO,EAAG,GAGtD,EAAG,uBAAuB,CApBR,GAqBlB,EAAG,uBAAuB,CApBP,GAqBnB,EAAG,uBAAuB,CApBX,GAwBf,EAAG,UAAU,CAAC,EAAG,MAAM,CAFV,EACD","sources":["<anon>","src/scripts/main.ts"],"sourcesContent":["var $1ccc8d3c866b7484$exports = {};\nfunction $1ccc8d3c866b7484$var$createShader(gl, type, source) {\n    let shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (success) return shader;\n    console.log(gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n    return null;\n}\nfunction $1ccc8d3c866b7484$var$createProgram(gl, vShader, fShader) {\n    let program = gl.createProgram();\n    gl.attachShader(program, vShader);\n    gl.attachShader(program, fShader);\n    gl.linkProgram(program);\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (success) return program;\n    console.log(gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n    return null;\n}\nfunction $1ccc8d3c866b7484$var$resizeCanvasToDisplaySize(canvas) {\n    const canvasToDisplaySizeMap = new Map([\n        [\n            canvas,\n            [\n                960,\n                540\n            ]\n        ]\n    ]);\n    const [dWidth, dHeight] = canvasToDisplaySizeMap.get(canvas);\n    const needResize = canvas.width != dWidth || canvas.height != dHeight;\n    if (needResize) {\n        console.log(`Current dimensions: ${canvas.width}px x ${canvas.height}px`);\n        console.log(`Resizing to ${dWidth}px x ${dHeight}px`);\n        canvas.width = dWidth;\n        canvas.height = dHeight;\n    }\n    return needResize;\n}\nconst $1ccc8d3c866b7484$var$vertexShaderSource = `#version 300 es\n#pragma vscode_glsllint_stage : vert\n\nlayout(location = 1) in float aPointSize;\nlayout(location = 0) in vec2 aPosition;\nlayout(location = 2) in vec3 aColor;\n\nout vec3 vColor;\n\nvoid main()\n{\n  vColor = aColor;\n  gl_Position = vec4(aPosition, 0.0, 1.0);\n  gl_PointSize = aPointSize;\n}`;\nconst $1ccc8d3c866b7484$var$fragmentShaderSource = `#version 300 es\n #pragma vscode_glsllint_stage : frag\n\nprecision highp float;\n \nin vec3 vColor;\n\nout vec4 fragColor;\n \nvoid main() {\n  fragColor = vec4(vColor, 1.0);\n}\n`;\nlet $1ccc8d3c866b7484$var$canvas = document.getElementById('gl-canvas');\nlet $1ccc8d3c866b7484$var$gl = $1ccc8d3c866b7484$var$canvas.getContext('webgl2') || null;\nif (!$1ccc8d3c866b7484$var$gl) $1ccc8d3c866b7484$var$canvas.innerHTML = '<h3>No WebGL for you!</h3>';\nlet $1ccc8d3c866b7484$var$vShader = $1ccc8d3c866b7484$var$createShader($1ccc8d3c866b7484$var$gl, $1ccc8d3c866b7484$var$gl.VERTEX_SHADER, $1ccc8d3c866b7484$var$vertexShaderSource);\nlet $1ccc8d3c866b7484$var$fShader = $1ccc8d3c866b7484$var$createShader($1ccc8d3c866b7484$var$gl, $1ccc8d3c866b7484$var$gl.FRAGMENT_SHADER, $1ccc8d3c866b7484$var$fragmentShaderSource);\nlet $1ccc8d3c866b7484$var$program = $1ccc8d3c866b7484$var$createProgram($1ccc8d3c866b7484$var$gl, $1ccc8d3c866b7484$var$vShader, $1ccc8d3c866b7484$var$fShader);\n$1ccc8d3c866b7484$var$gl.useProgram($1ccc8d3c866b7484$var$program);\nconst $1ccc8d3c866b7484$var$positionData = new Float32Array([\n    0.0,\n    0.0,\n    -0.5,\n    0.5,\n    -0.5,\n    -0.5,\n    0.5,\n    -0.5,\n    0.5,\n    0.5\n]);\nconst $1ccc8d3c866b7484$var$pointSizeData = new Float32Array([\n    100,\n    200,\n    300,\n    400,\n    50,\n    550\n]);\nconst $1ccc8d3c866b7484$var$colorData = new Float32Array([\n    0.8,\n    0.0,\n    0.6,\n    0.5,\n    0.5,\n    1.0,\n    0.75,\n    0.6,\n    0.0,\n    0.1,\n    0.2,\n    1.0,\n    0.5,\n    0.2,\n    0.1\n]);\nconst $1ccc8d3c866b7484$var$aPosition = 0;\nconst $1ccc8d3c866b7484$var$aPointSize = 1;\nconst $1ccc8d3c866b7484$var$aColor = 2;\nconst $1ccc8d3c866b7484$var$positionBuffer = $1ccc8d3c866b7484$var$gl.createBuffer();\n$1ccc8d3c866b7484$var$gl.bindBuffer($1ccc8d3c866b7484$var$gl.ARRAY_BUFFER, $1ccc8d3c866b7484$var$positionBuffer);\n$1ccc8d3c866b7484$var$gl.bufferData($1ccc8d3c866b7484$var$gl.ARRAY_BUFFER, $1ccc8d3c866b7484$var$positionData, $1ccc8d3c866b7484$var$gl.STATIC_DRAW);\n$1ccc8d3c866b7484$var$gl.vertexAttribPointer($1ccc8d3c866b7484$var$aPosition, 2, $1ccc8d3c866b7484$var$gl.FLOAT, false, 0, 0);\nconst $1ccc8d3c866b7484$var$pointSizeBuffer = $1ccc8d3c866b7484$var$gl.createBuffer();\n$1ccc8d3c866b7484$var$gl.bindBuffer($1ccc8d3c866b7484$var$gl.ARRAY_BUFFER, $1ccc8d3c866b7484$var$pointSizeBuffer);\n$1ccc8d3c866b7484$var$gl.bufferData($1ccc8d3c866b7484$var$gl.ARRAY_BUFFER, $1ccc8d3c866b7484$var$pointSizeData, $1ccc8d3c866b7484$var$gl.STATIC_DRAW);\n$1ccc8d3c866b7484$var$gl.vertexAttribPointer($1ccc8d3c866b7484$var$aPointSize, 1, $1ccc8d3c866b7484$var$gl.FLOAT, false, 0, 0);\nconst $1ccc8d3c866b7484$var$colorBuffer = $1ccc8d3c866b7484$var$gl.createBuffer();\n$1ccc8d3c866b7484$var$gl.bindBuffer($1ccc8d3c866b7484$var$gl.ARRAY_BUFFER, $1ccc8d3c866b7484$var$colorBuffer);\n$1ccc8d3c866b7484$var$gl.bufferData($1ccc8d3c866b7484$var$gl.ARRAY_BUFFER, $1ccc8d3c866b7484$var$colorData, $1ccc8d3c866b7484$var$gl.STATIC_DRAW);\n$1ccc8d3c866b7484$var$gl.vertexAttribPointer($1ccc8d3c866b7484$var$aColor, 3, $1ccc8d3c866b7484$var$gl.FLOAT, false, 0, 0);\n$1ccc8d3c866b7484$var$gl.enableVertexAttribArray($1ccc8d3c866b7484$var$aPosition);\n$1ccc8d3c866b7484$var$gl.enableVertexAttribArray($1ccc8d3c866b7484$var$aPointSize);\n$1ccc8d3c866b7484$var$gl.enableVertexAttribArray($1ccc8d3c866b7484$var$aColor);\nlet $1ccc8d3c866b7484$var$offset = 0;\nlet $1ccc8d3c866b7484$var$count = 5;\n$1ccc8d3c866b7484$var$gl.drawArrays($1ccc8d3c866b7484$var$gl.POINTS, $1ccc8d3c866b7484$var$offset, $1ccc8d3c866b7484$var$count);\n\n\n//# sourceMappingURL=index.9f1e08a9.js.map\n","function createShader(gl: WebGL2RenderingContext, type: GLenum, source: string ): WebGLShader | null {\n  let shader = gl.createShader(type) as WebGLShader;\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS) as GLboolean;\n\n  if (success) return shader;\n\n  console.log(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n  return null;\n}\n\nfunction createProgram(gl: WebGL2RenderingContext, vShader: WebGLShader, fShader: WebGLShader): WebGLProgram | null {\n  let program = gl.createProgram() as WebGLProgram;\n  gl.attachShader(program, vShader);\n  gl.attachShader(program, fShader);\n  gl.linkProgram(program);\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS) as GLboolean;\n\n  if (success) return program;\n\n  console.log(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n  return null;\n}\n\nfunction resizeCanvasToDisplaySize(canvas: HTMLCanvasElement): boolean {\n  const canvasToDisplaySizeMap = new Map([[canvas, [960, 540]]]);\n  const [dWidth, dHeight] = canvasToDisplaySizeMap.get(canvas) as [GLint, GLint];\n\n  const needResize = canvas.width != dWidth ||\n                     canvas.height != dHeight;\n\n  if (needResize) {\n    console.log(`Current dimensions: ${canvas.width}px x ${canvas.height}px`);\n    console.log(`Resizing to ${dWidth}px x ${dHeight}px`)\n    canvas.width = dWidth;\n    canvas.height = dHeight;\n  }\n  return needResize;\n}\n\nconst vertexShaderSource = `#version 300 es\n#pragma vscode_glsllint_stage : vert\n\nlayout(location = 1) in float aPointSize;\nlayout(location = 0) in vec2 aPosition;\nlayout(location = 2) in vec3 aColor;\n\nout vec3 vColor;\n\nvoid main()\n{\n  vColor = aColor;\n  gl_Position = vec4(aPosition, 0.0, 1.0);\n  gl_PointSize = aPointSize;\n}`;\n \nconst fragmentShaderSource = `#version 300 es\n #pragma vscode_glsllint_stage : frag\n\nprecision highp float;\n \nin vec3 vColor;\n\nout vec4 fragColor;\n \nvoid main() {\n  fragColor = vec4(vColor, 1.0);\n}\n`;\n\n\nlet canvas = document.getElementById('gl-canvas') as HTMLCanvasElement;\nlet gl = canvas.getContext('webgl2') as WebGL2RenderingContext || null;\nif (!gl) {\n  canvas.innerHTML = '<h3>No WebGL for you!</h3>';\n}\n\nlet vShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource) as WebGLShader;\nlet fShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource) as WebGLShader;\nlet program = createProgram(gl, vShader, fShader) as WebGLProgram;\ngl.useProgram(program);\n\n\nconst positionData = new Float32Array([\n  0.0, 0.0,\n  -.5, 0.5,\n  -.5, -.5,\n  0.5, -.5,\n  0.5, 0.5\n]);\nconst pointSizeData = new Float32Array([\n  100,\n  200,\n  300,\n  400,\n  50,\n  550\n]);\nconst colorData = new Float32Array([\n  0.8, 0.0, 0.6,\n  0.5, 0.5, 1.0,\n  0.75, 0.6, 0.0,\n  0.1, 0.2, 1.0,\n  0.5, 0.2, 0.1\n]);\n\nconst aPosition = 0;\nconst aPointSize = 1;\nconst aColor = 2;\n\nconst positionBuffer: WebGLBuffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, positionData, gl.STATIC_DRAW);\ngl.vertexAttribPointer(aPosition, 2, gl.FLOAT, false, 0, 0);\n\nconst pointSizeBuffer: WebGLBuffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, pointSizeBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, pointSizeData, gl.STATIC_DRAW);\ngl.vertexAttribPointer(aPointSize, 1, gl.FLOAT, false, 0, 0);\n\nconst colorBuffer: WebGLBuffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, colorData, gl.STATIC_DRAW);\ngl.vertexAttribPointer(aColor, 3, gl.FLOAT, false, 0, 0);\n\n\ngl.enableVertexAttribArray(aPosition);\ngl.enableVertexAttribArray(aPointSize);\ngl.enableVertexAttribArray(aColor);\n\nlet offset = 0;\nlet count = 5;\ngl.drawArrays(gl.POINTS, offset, count);"],"names":["program","$1ccc8d3c866b7484$var$createShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","$1ccc8d3c866b7484$var$vertexShaderSource","$1ccc8d3c866b7484$var$fragmentShaderSource","$1ccc8d3c866b7484$var$canvas","document","getElementById","$1ccc8d3c866b7484$var$gl","getContext","innerHTML","$1ccc8d3c866b7484$var$vShader","VERTEX_SHADER","$1ccc8d3c866b7484$var$fShader","FRAGMENT_SHADER","$1ccc8d3c866b7484$var$program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","useProgram","$1ccc8d3c866b7484$var$positionData","Float32Array","$1ccc8d3c866b7484$var$pointSizeData","$1ccc8d3c866b7484$var$colorData","$1ccc8d3c866b7484$var$positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","vertexAttribPointer","FLOAT","$1ccc8d3c866b7484$var$pointSizeBuffer","$1ccc8d3c866b7484$var$colorBuffer","enableVertexAttribArray","drawArrays","POINTS"],"version":3,"file":"index.9f1e08a9.js.map"}